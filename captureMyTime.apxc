/**
 * This class will be instantiated over & over in testing BUT cache will stay the same
 * Thus proving that things are in cache! 
 */
public class captureMyTime {

    /**
     * Places Cache in. For testing-sake change myCacheKey variable to something else
     * each time, that way cached key isn't overriden
	 */
    public void setMyTimeInCache(String myCacheKey){       
        DateTime dt = System.now();
        String CacheKeyString = 'local.VFPageCache.' + myCacheKey;
		Cache.Org.put(CacheKeyString, dt); 
        
        if (Cache.Org.contains(CacheKeyString)){
            DateTime cachedDt = (DateTime)Cache.Org.get(CacheKeyString);
            System.debug('In cache: ' + cachedDt + ' AND actual is: ' + System.Now());
        }
    }
    
	 /**
     * Pay attention to debug output - compared cached chachedDt variable vs system time
	 */
    public void getMyTimeInCache(String myCacheKeyToGet){       
		String CacheKeyToGetString = 'local.VFPageCache.' + myCacheKeyToGet;
        
        if (Cache.Org.contains(CacheKeyToGetString)){
            DateTime cachedDt = (DateTime)Cache.Org.get(CacheKeyToGetString);
            System.debug('In cache: ' + cachedDt + ' BUT actual is: ' + System.Now());
        }
    }
    
    /**
     * Scrap work example:
     * captureMyTime myTimeCheck = new captureMyTime();
	 * myTimeCheck.setMyTimeInCache('a123');
	 * myTimeCheck.getMyTimeInCache('a123');
	 */
}
